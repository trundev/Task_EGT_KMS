name: Build and test

on:
  push:

env:
  BUILD_DIR: build

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]

    steps:
    - uses: actions/checkout@v5

    - name: Build dependencies (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: sudo apt install -y protobuf-compiler

    - name: Checkout protobuf (Window)
      if: ${{ runner.os == 'Windows' }}
      uses: actions/checkout@v5
      with:
        repository: protocolbuffers/protobuf
        submodules: true
        # Use a safe protobuf version to avoid extra dependencies,
        # like Abseil's logging library
        ref: v3.21.12
        path: protobuf

    - name: Build protobuf (Window)
      if: ${{ runner.os == 'Windows' }}
      working-directory: protobuf
      run: |
        cmake -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/protobuf-install `
            -Dprotobuf_MSVC_STATIC_RUNTIME=OFF `
            -Dprotobuf_BUILD_TESTS=OFF
        cmake --build ${{ env.BUILD_DIR }} --target INSTALL
        echo "CMAKE_PREFIX_PATH=${{ github.workspace }}/protobuf-install" >> $env:GITHUB_ENV

    - name: Configure
      run: cmake -B ${{ env.BUILD_DIR }}

    - name: Build
      run: cmake --build ${{ env.BUILD_DIR }}

    - name: Move binaries around (Windows)
      if: ${{ runner.os == 'Windows' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        cp ./server_side/Debug/chat_server.* ./server_side/
        cp ./client_side/Debug/chat_client.* ./client_side/

    - name: Simple test
      shell: bash
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        echo '# Run server in background (30 sec timeout)'
        timeout 30s ./server_side/chat_server &
        srv_pid=$!
        # Wait until server is accepting connections
        sleep 1

        echo '# Run client to send single line'
        echo This is a message | ./client_side/chat_client localhost USER || exit 255

        echo '#'
        echo "# Wait for the server (pid $srv_pid) to be timed-out"
        wait $srv_pid || status=$?
        # Fail only if job was NOT timed-out
        [ $status -eq 124 ] || exit $status

        echo "# Examine generated server-log"
        cat log_*.txt
        cat log_*.txt | grep "USER: This is a message" || exit 255

    - uses: actions/upload-artifact@v4
      with:
        name: chat-system-${{ runner.os }}
        path: |
          ${{ env.BUILD_DIR }}/server_side/chat_server
          ${{ env.BUILD_DIR }}/client_side/chat_client

  python-package:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Build dependencies
      run: sudo apt install -y protobuf-compiler

    - name: Generate protobuf
      working-directory: client_side_tkinter
      run: |
        mkdir ./protobuf
        protoc --proto_path=../common --python_out=./protobuf messages.proto

    - uses: actions/upload-artifact@v4
      with:
        name: chat-system-python
        path: |
          client_side_tkinter/
          !client_side_tkinter/**/__pycache__/
